print('dev tools')
print('small toolset to help working on brickutils')
print('1: convert hsva to u8 hsva')
print('2: convert u8 hsva to hsva')
print('3: reset config.json')
print('4: create code injector')

import os

tool = input()


if tool == '1':

    h = float(input('hÂ°='))
    s = float(input('s%='))
    v = float(input('v%='))
    a = float(input('a%='))

    print(f'{int(h/360*255)=}, {int(s/100*255)=}, {int(v/100*255)=}, {int(a/100*255)=}')

elif tool == '2':

    h = float(input('hu8='))
    s = float(input('su8='))
    v = float(input('vu8='))
    a = float(input('au8='))

    print(f'{h/255*360=}, {s/255*100=}, {v/255*100=}, {a/255*100=}')

elif tool == '3':

    cwd = os.path.dirname(os.path.realpath(__file__))
    source = os.path.join(cwd, 'resources', 'default_config')  # has no extension
    new_path = os.path.join(cwd, 'config.json')

    with open(source, 'rb') as f:
        file = f.read()

    with open(new_path, 'wb') as f:
        f.write(file)

elif tool == '4':

    cwd = os.path.dirname(os.path.realpath(__file__))

    force_settings_path = os.path.join(cwd, 'resources', 'force_settings.txt')

    if not os.path.exists(force_settings_path):
        with open(force_settings_path, 'w') as f:
            f.write("""# WARN: EDITING THIS IS NOT SAFE. IT RUNS ARBITRARY CODE.
# EXEC(), USED HERE, IS A LOT MORE POWERFUL THAN OTHER FEATURES CAPABLE OF RUNNING ARBITRARY CODE IN BRICK UTILS.
# WE (BRICK UTILS DEVELOPER) ARE NOT LIABLE FOR ANY DAMAGE CAUSED BY THIS FILE.
# DO NOT DOWNLOAD VERSIONS OF THIS FILE FROM UNTRUSTED SOURCES.
# DO NOT EDIT THIS FILE IF YOU DON'T KNOW EITHER PYTHON OR THE BRICK UTILS CODE WELL ENOUGH.
# THIS FILE IS ONLY FOR DEVELOPMENT AND DEBUGGING PURPOSES.

# THIS FILE IS RUN AFTER BRICK UTILS IS INITIALIZED.
# RUN IN MAIN.PY, LINES 21-29

# safe_mode = False
# memory['main']['system'] = 'stud'


import threading
import tkinter as tk

def get_input():
    user_input = input_entry.get("1.0", tk.END)  # Get all the text in the Text widget
    try:
        exec(user_input, globals())
    except Exception as e:
        global error_label
        # Summon an error input label
        error_label.config(text=f"{type(e).__name__}: {e}")
        
def my_concurrent_function():

    root = tk.Tk()
    root.geometry("512x256")
    root.title("BrickUtils - code injector (force_settings.txt)")
    
    title_label = tk.Label(root, text="Enter code to run:"+" "*135)
    title_label.pack()
    
    global input_entry
    input_entry = tk.Text(root, height=12, width=62)
    input_entry.pack()
    
    submit_button = tk.Button(root, text="Inject Python code", command=get_input)
    submit_button.pack(side="right", padx=5)
    
    global error_label
    error_label = tk.Label(root, text="")
    error_label.pack(side="left")
    
    root.mainloop()
    
concurrent_thread = threading.Thread(target=my_concurrent_function)
concurrent_thread.start()""")

input('press anything to quit.')